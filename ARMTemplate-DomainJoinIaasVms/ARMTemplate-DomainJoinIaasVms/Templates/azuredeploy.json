{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "localAdminUserName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "localAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "domainAdminUserName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for domain joining"
      }
    },
    "domainAdminPassword": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "Password for domain joining"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of VMs to deploy"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the Virtual Machine"
      }
    },
    "vnetId": {
      "type": "string",
      "metadata": {
        "description": "The Virtual Network attached to the VM"
      }
    },
    "storageAccountType": {
      "type": "string",
      "metadata": {
        "description": "The Storage Account type"
      }
    },
    "storageAccountContainerName": {
      "type": "string",
      "metadata": {
        "description": "The Storage Account Container name"
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },
    "userImageStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the your storage account"
      }
    },
    "userImageStorageContainerName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the container in your storage account"
      }
    },
    "userImageVhdName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the your customized VHD"
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "redmond.corp.microsoft.com",
      "metadata": {
        "description": "The FQDN of the AD domain"
      }
    },
    "assetLocation": {
      "type": "string",
      "metadata": {
        "description": "The location of resources such as templates and DSC modules that the script is dependent"
      }
    },
    "dscFunction": {
      "type": "string",
      "metadata": {
        "description": "Function name of the DSC script"
      }
    },
    "_artifactsLocation": {
      "type": "string"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring"
    },
    "firewallsetupScriptFolder": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Script file location. This path is relative to the _artifactsLocation parameter"
      }
    },
    "firewallsetupScriptFileName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Name of the script file"
      }
    },
    "appID": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "appID tag for the Virtual Machine."
      }
    },
    "orgID": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "orgID tag for the Virtual Machine."
      }
    },
    "monitor": {
      "type": "string",
      "minLength": 1,
      "allowedValues": [
        "true",
        "false"
      ],
      "metadata": {
        "description": "monitor status tag for the Virtual Machine."
      }
    },
    "env": {
      "type": "string",
      "minLength": 1,
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "environment tag for the Virtual Machine."
      }
    },
    "snoozeDate": {
      "type": "string",
      "metadata": {
        "description": "Snooze date"
      }
    },
    "additionalAdmins": {
      "type": "string",
      "metadata": {
        "description": "Additional admins that can login to the VMs"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address Prefix"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "Subnet-1",
      "metadata": {
        "description": "Name for the subnet"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix"
      }
    }
  },
  "variables": {
    "addressPrefix": "[parameters('addressPrefix')]",
    "apiVersion": "2015-06-15",
    "customScriptStorageAccountName": "sdoscriptslibrarydev",
    "customScriptFileUri": "https://sdoscriptslibrarydev.blob.core.windows.net/scripts/sdonewmachine.ps1",
    "customScriptFileToRun": "sdonewmachine.ps1",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "nicName": "[parameters('vmName')]",
    "OSDiskName": "osdiskforwindowssimple",
    "subnetName": "[parameters('subnetName')]",
    "subnetPrefix": "[parameters('subnetPrefix')]",
    "userImageName": "[concat('http://',parameters('userImageStorageAccountName'),'.blob.core.windows.net/',parameters('userImageStorageContainerName'),'/',parameters('userImageVhdName'))]",
    "storageAccountName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
    "storageAccountType": "[parameters('storageAccountType')]",
    "storageAccountContainerName": "[parameters('storageAccountContainerName')]",
    "vmName": "[parameters('vmName')]",
    "vmSize": "[parameters('vmSize')]",
    "vnetId": "[parameters('vnetId')]",
    "diagnosticsStorageName": "[variables('storageAccountName')]",
    "commandToExecute": "[concat('powershell.exe -File', ' ', variables('customScriptFileToRun'))]",
    "osDiskVhdName": "[concat('http://',parameters('userImageStorageAccountName'),'.blob.core.windows.net/vhds/',variables('vmName'),'osDisk')]",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]", //change to parameter, used existing value as default value
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": { //add to tags section.  Tags are Env, AppID, OrgID, and SnoozeDate
        "displayName": "StorageAccount"
      },
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'),copyindex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NetworkInterface" //add to tags section.  Tags are Env, AppID, OrgID, and SnoozeDate
      },
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        //"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        //"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'),copyindex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualMachine",
        "appID": "[parameters('appID')]",
        "orgID": "[parameters('orgID')]",
        "monitor": "[parameters('monitor')]",
        "env": "[parameters('env')]",
        "snoozeDate": "[parameters('snoozeDate')]"
      },
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'),copyindex())]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'),copyIndex())]",
          "adminUsername": "[parameters('localAdminUserName')]",
          "adminPassword": "[parameters('localAdminPassword')]"
        },
        "storageProfile": {
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "image": {
              "uri": "[variables('userImageName')]"
            },
            "name": "[concat(variables('vmName'),copyindex(),'-osDisk')]",
            "osType": "Windows",
            "vhd": {
              "uri": "[concat(variables('osDiskVhdName'),copyindex(),'.vhd')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'),copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://', variables('diagnosticsStorageName'), '.blob.core.windows.net')]"
          }
        }
      },
      "resources": [
        {
          "type": "extensions",
          "name": "CustomScriptExtension",
          "apiVersion": "[variables('apiVersion')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyindex())]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": "true",
            "settings": {
              "fileUris": [ "[variables('customScriptFileUri')]" ],
              "commandToExecute": "[variables('commandToExecute')]"
            }
          }
        },
        {  //I think we should comment out the DSC section and handle the domain join outside of the JSON in the PS module.  With DSC its leaving the encrypted password and the private key used to do the encryption
          "type": "extensions",
          "name": "dscExt",
          "apiVersion": "[variables('apiVersion')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyindex())]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "settings": {
              "ModulesUrl": "[parameters('assetLocation')]",
              "SasToken": "",
              "ConfigurationFunction": "[parameters('dscFunction')]",
              "Properties": {
                "Domain": "[parameters('domainName')]",
                "Admincreds": {
                  "UserName": "[parameters('domainAdminUserName')]",
                  "Password": "PrivateSettingsRef:AdminPassword"
                },
                "AdditionalAdmins": "[parameters('additionalAdmins')]"
              }
            },
            "protectedSettings": {
              "Items": {
                "AdminPassword": "[parameters('domainAdminPassword')]"
              }
            }
          }
        }
      ]
    }
  ]
}
